// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sql-api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQLServiceClient is the client API for SQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLServiceClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	// BuyerModel APIs
	CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error)
	GetBuyerByID(ctx context.Context, in *GetBuyerByIDRequest, opts ...grpc.CallOption) (*GetBuyerByIDResponse, error)
	GetBuyerByUserName(ctx context.Context, in *GetBuyerByUserNameRequest, opts ...grpc.CallOption) (*GetBuyerByUserNameResponse, error)
	UpdateBuyerByID(ctx context.Context, in *UpdateBuyerByIDRequest, opts ...grpc.CallOption) (*UpdateBuyerByIDResponse, error)
	// CartModel APIs
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error)
	GetCartByBuyerID(ctx context.Context, in *GetCartByBuyerIDRequest, opts ...grpc.CallOption) (*GetCartByBuyerIDResponse, error)
	UpdateCartByID(ctx context.Context, in *UpdateCartByIDRequest, opts ...grpc.CallOption) (*UpdateCartByIDResponse, error)
	DeleteCartByID(ctx context.Context, in *DeleteCartByIDRequest, opts ...grpc.CallOption) (*DeleteCartByIDResponse, error)
	// CartItemModel APIs
	CreateCartItem(ctx context.Context, in *CreateCartItemRequest, opts ...grpc.CallOption) (*CreateCartItemResponse, error)
	GetCartItemByID(ctx context.Context, in *GetCartItemByIDRequest, opts ...grpc.CallOption) (*GetCartItemByIDResponse, error)
	GetCartItemByCartIDAndProductID(ctx context.Context, in *GetCartItemByCartIDAndProductIDRequest, opts ...grpc.CallOption) (*GetCartItemByCartIDAndProductIDResponse, error)
	ListCartItemByCartID(ctx context.Context, in *ListCartItemByCartIDRequest, opts ...grpc.CallOption) (*ListCartItemByCartIDResponse, error)
	UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*UpdateCartItemResponse, error)
	DeleteCartItemByCartIDAndProductID(ctx context.Context, in *DeleteCartItemByCartIDAndProductIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByCartIDAndProductIDResponse, error)
	DeleteCartItemByCartID(ctx context.Context, in *DeleteCartItemByCartIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByCartIDResponse, error)
	DeleteCartItemByProductID(ctx context.Context, in *DeleteCartItemByProductIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByProductIDResponse, error)
	// SellerModel APIs
	CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*GetSellerByIDResponse, error)
	GetSellerByUserName(ctx context.Context, in *GetSellerByUserNameRequest, opts ...grpc.CallOption) (*GetSellerByUserNameResponse, error)
	UpdateSellerByID(ctx context.Context, in *UpdateSellerByIDRequest, opts ...grpc.CallOption) (*UpdateSellerByIDResponse, error)
	// SessionModel APIs
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	GetSessionByID(ctx context.Context, in *GetSessionByIDRequest, opts ...grpc.CallOption) (*GetSessionByIDResponse, error)
	GetSessionByUserID(ctx context.Context, in *GetSessionByUserIDRequest, opts ...grpc.CallOption) (*GetSessionByUserIDResponse, error)
	DeleteSessionByID(ctx context.Context, in *DeleteSessionByIDRequest, opts ...grpc.CallOption) (*DeleteSessionByIDResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	ListTransactionsBySellerID(ctx context.Context, in *ListTransactionsBySellerIDRequest, opts ...grpc.CallOption) (*ListTransactionsBySellerIDResponse, error)
	ListTransactionsByBuyerID(ctx context.Context, in *ListTransactionsByBuyerIDRequest, opts ...grpc.CallOption) (*ListTransactionsByBuyerIDResponse, error)
	ListTransactionsByCartID(ctx context.Context, in *ListTransactionsByCartIDRequest, opts ...grpc.CallOption) (*ListTransactionsByCartIDResponse, error)
	DeleteTransactionsByCartID(ctx context.Context, in *DeleteTransactionsByCartIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsByCartIDResponse, error)
	DeleteTransactionsByBuyerID(ctx context.Context, in *DeleteTransactionsByBuyerIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsByBuyerIDResponse, error)
	DeleteTransactionsBySellerID(ctx context.Context, in *DeleteTransactionsBySellerIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsBySellerIDResponse, error)
}

type sQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLServiceClient(cc grpc.ClientConnInterface) SQLServiceClient {
	return &sQLServiceClient{cc}
}

func (c *sQLServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error) {
	out := new(CreateBuyerResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetBuyerByID(ctx context.Context, in *GetBuyerByIDRequest, opts ...grpc.CallOption) (*GetBuyerByIDResponse, error) {
	out := new(GetBuyerByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetBuyerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetBuyerByUserName(ctx context.Context, in *GetBuyerByUserNameRequest, opts ...grpc.CallOption) (*GetBuyerByUserNameResponse, error) {
	out := new(GetBuyerByUserNameResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetBuyerByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) UpdateBuyerByID(ctx context.Context, in *UpdateBuyerByIDRequest, opts ...grpc.CallOption) (*UpdateBuyerByIDResponse, error) {
	out := new(UpdateBuyerByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/UpdateBuyerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error) {
	out := new(GetCartByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetCartByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetCartByBuyerID(ctx context.Context, in *GetCartByBuyerIDRequest, opts ...grpc.CallOption) (*GetCartByBuyerIDResponse, error) {
	out := new(GetCartByBuyerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetCartByBuyerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) UpdateCartByID(ctx context.Context, in *UpdateCartByIDRequest, opts ...grpc.CallOption) (*UpdateCartByIDResponse, error) {
	out := new(UpdateCartByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/UpdateCartByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteCartByID(ctx context.Context, in *DeleteCartByIDRequest, opts ...grpc.CallOption) (*DeleteCartByIDResponse, error) {
	out := new(DeleteCartByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteCartByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateCartItem(ctx context.Context, in *CreateCartItemRequest, opts ...grpc.CallOption) (*CreateCartItemResponse, error) {
	out := new(CreateCartItemResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetCartItemByID(ctx context.Context, in *GetCartItemByIDRequest, opts ...grpc.CallOption) (*GetCartItemByIDResponse, error) {
	out := new(GetCartItemByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetCartItemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetCartItemByCartIDAndProductID(ctx context.Context, in *GetCartItemByCartIDAndProductIDRequest, opts ...grpc.CallOption) (*GetCartItemByCartIDAndProductIDResponse, error) {
	out := new(GetCartItemByCartIDAndProductIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetCartItemByCartIDAndProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) ListCartItemByCartID(ctx context.Context, in *ListCartItemByCartIDRequest, opts ...grpc.CallOption) (*ListCartItemByCartIDResponse, error) {
	out := new(ListCartItemByCartIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/ListCartItemByCartID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...grpc.CallOption) (*UpdateCartItemResponse, error) {
	out := new(UpdateCartItemResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/UpdateCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteCartItemByCartIDAndProductID(ctx context.Context, in *DeleteCartItemByCartIDAndProductIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByCartIDAndProductIDResponse, error) {
	out := new(DeleteCartItemByCartIDAndProductIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteCartItemByCartIDAndProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteCartItemByCartID(ctx context.Context, in *DeleteCartItemByCartIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByCartIDResponse, error) {
	out := new(DeleteCartItemByCartIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteCartItemByCartID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteCartItemByProductID(ctx context.Context, in *DeleteCartItemByProductIDRequest, opts ...grpc.CallOption) (*DeleteCartItemByProductIDResponse, error) {
	out := new(DeleteCartItemByProductIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteCartItemByProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*GetSellerByIDResponse, error) {
	out := new(GetSellerByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetSellerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetSellerByUserName(ctx context.Context, in *GetSellerByUserNameRequest, opts ...grpc.CallOption) (*GetSellerByUserNameResponse, error) {
	out := new(GetSellerByUserNameResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetSellerByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) UpdateSellerByID(ctx context.Context, in *UpdateSellerByIDRequest, opts ...grpc.CallOption) (*UpdateSellerByIDResponse, error) {
	out := new(UpdateSellerByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/UpdateSellerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetSessionByID(ctx context.Context, in *GetSessionByIDRequest, opts ...grpc.CallOption) (*GetSessionByIDResponse, error) {
	out := new(GetSessionByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetSessionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) GetSessionByUserID(ctx context.Context, in *GetSessionByUserIDRequest, opts ...grpc.CallOption) (*GetSessionByUserIDResponse, error) {
	out := new(GetSessionByUserIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/GetSessionByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteSessionByID(ctx context.Context, in *DeleteSessionByIDRequest, opts ...grpc.CallOption) (*DeleteSessionByIDResponse, error) {
	out := new(DeleteSessionByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteSessionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) ListTransactionsBySellerID(ctx context.Context, in *ListTransactionsBySellerIDRequest, opts ...grpc.CallOption) (*ListTransactionsBySellerIDResponse, error) {
	out := new(ListTransactionsBySellerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/ListTransactionsBySellerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) ListTransactionsByBuyerID(ctx context.Context, in *ListTransactionsByBuyerIDRequest, opts ...grpc.CallOption) (*ListTransactionsByBuyerIDResponse, error) {
	out := new(ListTransactionsByBuyerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/ListTransactionsByBuyerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) ListTransactionsByCartID(ctx context.Context, in *ListTransactionsByCartIDRequest, opts ...grpc.CallOption) (*ListTransactionsByCartIDResponse, error) {
	out := new(ListTransactionsByCartIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/ListTransactionsByCartID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteTransactionsByCartID(ctx context.Context, in *DeleteTransactionsByCartIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsByCartIDResponse, error) {
	out := new(DeleteTransactionsByCartIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteTransactionsByCartID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteTransactionsByBuyerID(ctx context.Context, in *DeleteTransactionsByBuyerIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsByBuyerIDResponse, error) {
	out := new(DeleteTransactionsByBuyerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteTransactionsByBuyerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQLServiceClient) DeleteTransactionsBySellerID(ctx context.Context, in *DeleteTransactionsBySellerIDRequest, opts ...grpc.CallOption) (*DeleteTransactionsBySellerIDResponse, error) {
	out := new(DeleteTransactionsBySellerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.SQLService/DeleteTransactionsBySellerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLServiceServer is the server API for SQLService service.
// All implementations must embed UnimplementedSQLServiceServer
// for forward compatibility
type SQLServiceServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// BuyerModel APIs
	CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error)
	GetBuyerByID(context.Context, *GetBuyerByIDRequest) (*GetBuyerByIDResponse, error)
	GetBuyerByUserName(context.Context, *GetBuyerByUserNameRequest) (*GetBuyerByUserNameResponse, error)
	UpdateBuyerByID(context.Context, *UpdateBuyerByIDRequest) (*UpdateBuyerByIDResponse, error)
	// CartModel APIs
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error)
	GetCartByBuyerID(context.Context, *GetCartByBuyerIDRequest) (*GetCartByBuyerIDResponse, error)
	UpdateCartByID(context.Context, *UpdateCartByIDRequest) (*UpdateCartByIDResponse, error)
	DeleteCartByID(context.Context, *DeleteCartByIDRequest) (*DeleteCartByIDResponse, error)
	// CartItemModel APIs
	CreateCartItem(context.Context, *CreateCartItemRequest) (*CreateCartItemResponse, error)
	GetCartItemByID(context.Context, *GetCartItemByIDRequest) (*GetCartItemByIDResponse, error)
	GetCartItemByCartIDAndProductID(context.Context, *GetCartItemByCartIDAndProductIDRequest) (*GetCartItemByCartIDAndProductIDResponse, error)
	ListCartItemByCartID(context.Context, *ListCartItemByCartIDRequest) (*ListCartItemByCartIDResponse, error)
	UpdateCartItem(context.Context, *UpdateCartItemRequest) (*UpdateCartItemResponse, error)
	DeleteCartItemByCartIDAndProductID(context.Context, *DeleteCartItemByCartIDAndProductIDRequest) (*DeleteCartItemByCartIDAndProductIDResponse, error)
	DeleteCartItemByCartID(context.Context, *DeleteCartItemByCartIDRequest) (*DeleteCartItemByCartIDResponse, error)
	DeleteCartItemByProductID(context.Context, *DeleteCartItemByProductIDRequest) (*DeleteCartItemByProductIDResponse, error)
	// SellerModel APIs
	CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	GetSellerByID(context.Context, *GetSellerByIDRequest) (*GetSellerByIDResponse, error)
	GetSellerByUserName(context.Context, *GetSellerByUserNameRequest) (*GetSellerByUserNameResponse, error)
	UpdateSellerByID(context.Context, *UpdateSellerByIDRequest) (*UpdateSellerByIDResponse, error)
	// SessionModel APIs
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	GetSessionByID(context.Context, *GetSessionByIDRequest) (*GetSessionByIDResponse, error)
	GetSessionByUserID(context.Context, *GetSessionByUserIDRequest) (*GetSessionByUserIDResponse, error)
	DeleteSessionByID(context.Context, *DeleteSessionByIDRequest) (*DeleteSessionByIDResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	ListTransactionsBySellerID(context.Context, *ListTransactionsBySellerIDRequest) (*ListTransactionsBySellerIDResponse, error)
	ListTransactionsByBuyerID(context.Context, *ListTransactionsByBuyerIDRequest) (*ListTransactionsByBuyerIDResponse, error)
	ListTransactionsByCartID(context.Context, *ListTransactionsByCartIDRequest) (*ListTransactionsByCartIDResponse, error)
	DeleteTransactionsByCartID(context.Context, *DeleteTransactionsByCartIDRequest) (*DeleteTransactionsByCartIDResponse, error)
	DeleteTransactionsByBuyerID(context.Context, *DeleteTransactionsByBuyerIDRequest) (*DeleteTransactionsByBuyerIDResponse, error)
	DeleteTransactionsBySellerID(context.Context, *DeleteTransactionsBySellerIDRequest) (*DeleteTransactionsBySellerIDResponse, error)
	mustEmbedUnimplementedSQLServiceServer()
}

// UnimplementedSQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSQLServiceServer struct {
}

func (UnimplementedSQLServiceServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedSQLServiceServer) CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (UnimplementedSQLServiceServer) GetBuyerByID(context.Context, *GetBuyerByIDRequest) (*GetBuyerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByID not implemented")
}
func (UnimplementedSQLServiceServer) GetBuyerByUserName(context.Context, *GetBuyerByUserNameRequest) (*GetBuyerByUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByUserName not implemented")
}
func (UnimplementedSQLServiceServer) UpdateBuyerByID(context.Context, *UpdateBuyerByIDRequest) (*UpdateBuyerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerByID not implemented")
}
func (UnimplementedSQLServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedSQLServiceServer) GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByID not implemented")
}
func (UnimplementedSQLServiceServer) GetCartByBuyerID(context.Context, *GetCartByBuyerIDRequest) (*GetCartByBuyerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByBuyerID not implemented")
}
func (UnimplementedSQLServiceServer) UpdateCartByID(context.Context, *UpdateCartByIDRequest) (*UpdateCartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartByID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteCartByID(context.Context, *DeleteCartByIDRequest) (*DeleteCartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartByID not implemented")
}
func (UnimplementedSQLServiceServer) CreateCartItem(context.Context, *CreateCartItemRequest) (*CreateCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCartItem not implemented")
}
func (UnimplementedSQLServiceServer) GetCartItemByID(context.Context, *GetCartItemByIDRequest) (*GetCartItemByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItemByID not implemented")
}
func (UnimplementedSQLServiceServer) GetCartItemByCartIDAndProductID(context.Context, *GetCartItemByCartIDAndProductIDRequest) (*GetCartItemByCartIDAndProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItemByCartIDAndProductID not implemented")
}
func (UnimplementedSQLServiceServer) ListCartItemByCartID(context.Context, *ListCartItemByCartIDRequest) (*ListCartItemByCartIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCartItemByCartID not implemented")
}
func (UnimplementedSQLServiceServer) UpdateCartItem(context.Context, *UpdateCartItemRequest) (*UpdateCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItem not implemented")
}
func (UnimplementedSQLServiceServer) DeleteCartItemByCartIDAndProductID(context.Context, *DeleteCartItemByCartIDAndProductIDRequest) (*DeleteCartItemByCartIDAndProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItemByCartIDAndProductID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteCartItemByCartID(context.Context, *DeleteCartItemByCartIDRequest) (*DeleteCartItemByCartIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItemByCartID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteCartItemByProductID(context.Context, *DeleteCartItemByProductIDRequest) (*DeleteCartItemByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItemByProductID not implemented")
}
func (UnimplementedSQLServiceServer) CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedSQLServiceServer) GetSellerByID(context.Context, *GetSellerByIDRequest) (*GetSellerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByID not implemented")
}
func (UnimplementedSQLServiceServer) GetSellerByUserName(context.Context, *GetSellerByUserNameRequest) (*GetSellerByUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByUserName not implemented")
}
func (UnimplementedSQLServiceServer) UpdateSellerByID(context.Context, *UpdateSellerByIDRequest) (*UpdateSellerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerByID not implemented")
}
func (UnimplementedSQLServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSQLServiceServer) GetSessionByID(context.Context, *GetSessionByIDRequest) (*GetSessionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByID not implemented")
}
func (UnimplementedSQLServiceServer) GetSessionByUserID(context.Context, *GetSessionByUserIDRequest) (*GetSessionByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByUserID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteSessionByID(context.Context, *DeleteSessionByIDRequest) (*DeleteSessionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionByID not implemented")
}
func (UnimplementedSQLServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedSQLServiceServer) ListTransactionsBySellerID(context.Context, *ListTransactionsBySellerIDRequest) (*ListTransactionsBySellerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsBySellerID not implemented")
}
func (UnimplementedSQLServiceServer) ListTransactionsByBuyerID(context.Context, *ListTransactionsByBuyerIDRequest) (*ListTransactionsByBuyerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByBuyerID not implemented")
}
func (UnimplementedSQLServiceServer) ListTransactionsByCartID(context.Context, *ListTransactionsByCartIDRequest) (*ListTransactionsByCartIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByCartID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteTransactionsByCartID(context.Context, *DeleteTransactionsByCartIDRequest) (*DeleteTransactionsByCartIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionsByCartID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteTransactionsByBuyerID(context.Context, *DeleteTransactionsByBuyerIDRequest) (*DeleteTransactionsByBuyerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionsByBuyerID not implemented")
}
func (UnimplementedSQLServiceServer) DeleteTransactionsBySellerID(context.Context, *DeleteTransactionsBySellerIDRequest) (*DeleteTransactionsBySellerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionsBySellerID not implemented")
}
func (UnimplementedSQLServiceServer) mustEmbedUnimplementedSQLServiceServer() {}

// UnsafeSQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLServiceServer will
// result in compilation errors.
type UnsafeSQLServiceServer interface {
	mustEmbedUnimplementedSQLServiceServer()
}

func RegisterSQLServiceServer(s grpc.ServiceRegistrar, srv SQLServiceServer) {
	s.RegisterService(&SQLService_ServiceDesc, srv)
}

func _SQLService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateBuyer(ctx, req.(*CreateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetBuyerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetBuyerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetBuyerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetBuyerByID(ctx, req.(*GetBuyerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetBuyerByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerByUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetBuyerByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetBuyerByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetBuyerByUserName(ctx, req.(*GetBuyerByUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_UpdateBuyerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuyerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).UpdateBuyerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/UpdateBuyerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).UpdateBuyerByID(ctx, req.(*UpdateBuyerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetCartByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetCartByID(ctx, req.(*GetCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetCartByBuyerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByBuyerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetCartByBuyerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetCartByBuyerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetCartByBuyerID(ctx, req.(*GetCartByBuyerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_UpdateCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).UpdateCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/UpdateCartByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).UpdateCartByID(ctx, req.(*UpdateCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteCartByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteCartByID(ctx, req.(*DeleteCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateCartItem(ctx, req.(*CreateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetCartItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetCartItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetCartItemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetCartItemByID(ctx, req.(*GetCartItemByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetCartItemByCartIDAndProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartItemByCartIDAndProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetCartItemByCartIDAndProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetCartItemByCartIDAndProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetCartItemByCartIDAndProductID(ctx, req.(*GetCartItemByCartIDAndProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_ListCartItemByCartID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCartItemByCartIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).ListCartItemByCartID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/ListCartItemByCartID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).ListCartItemByCartID(ctx, req.(*ListCartItemByCartIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_UpdateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).UpdateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/UpdateCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).UpdateCartItem(ctx, req.(*UpdateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteCartItemByCartIDAndProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemByCartIDAndProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteCartItemByCartIDAndProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteCartItemByCartIDAndProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteCartItemByCartIDAndProductID(ctx, req.(*DeleteCartItemByCartIDAndProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteCartItemByCartID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemByCartIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteCartItemByCartID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteCartItemByCartID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteCartItemByCartID(ctx, req.(*DeleteCartItemByCartIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteCartItemByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteCartItemByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteCartItemByProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteCartItemByProductID(ctx, req.(*DeleteCartItemByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateSeller(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetSellerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetSellerByID(ctx, req.(*GetSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetSellerByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetSellerByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetSellerByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetSellerByUserName(ctx, req.(*GetSellerByUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_UpdateSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).UpdateSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/UpdateSellerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).UpdateSellerByID(ctx, req.(*UpdateSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetSessionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetSessionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetSessionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetSessionByID(ctx, req.(*GetSessionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_GetSessionByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).GetSessionByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/GetSessionByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).GetSessionByUserID(ctx, req.(*GetSessionByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteSessionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteSessionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteSessionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteSessionByID(ctx, req.(*DeleteSessionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_ListTransactionsBySellerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsBySellerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).ListTransactionsBySellerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/ListTransactionsBySellerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).ListTransactionsBySellerID(ctx, req.(*ListTransactionsBySellerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_ListTransactionsByBuyerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByBuyerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).ListTransactionsByBuyerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/ListTransactionsByBuyerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).ListTransactionsByBuyerID(ctx, req.(*ListTransactionsByBuyerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_ListTransactionsByCartID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByCartIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).ListTransactionsByCartID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/ListTransactionsByCartID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).ListTransactionsByCartID(ctx, req.(*ListTransactionsByCartIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteTransactionsByCartID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionsByCartIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteTransactionsByCartID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteTransactionsByCartID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteTransactionsByCartID(ctx, req.(*DeleteTransactionsByCartIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteTransactionsByBuyerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionsByBuyerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteTransactionsByBuyerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteTransactionsByBuyerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteTransactionsByBuyerID(ctx, req.(*DeleteTransactionsByBuyerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQLService_DeleteTransactionsBySellerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionsBySellerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLServiceServer).DeleteTransactionsBySellerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SQLService/DeleteTransactionsBySellerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLServiceServer).DeleteTransactionsBySellerID(ctx, req.(*DeleteTransactionsBySellerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLService_ServiceDesc is the grpc.ServiceDesc for SQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SQLService",
	HandlerType: (*SQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _SQLService_Initialize_Handler,
		},
		{
			MethodName: "CreateBuyer",
			Handler:    _SQLService_CreateBuyer_Handler,
		},
		{
			MethodName: "GetBuyerByID",
			Handler:    _SQLService_GetBuyerByID_Handler,
		},
		{
			MethodName: "GetBuyerByUserName",
			Handler:    _SQLService_GetBuyerByUserName_Handler,
		},
		{
			MethodName: "UpdateBuyerByID",
			Handler:    _SQLService_UpdateBuyerByID_Handler,
		},
		{
			MethodName: "CreateCart",
			Handler:    _SQLService_CreateCart_Handler,
		},
		{
			MethodName: "GetCartByID",
			Handler:    _SQLService_GetCartByID_Handler,
		},
		{
			MethodName: "GetCartByBuyerID",
			Handler:    _SQLService_GetCartByBuyerID_Handler,
		},
		{
			MethodName: "UpdateCartByID",
			Handler:    _SQLService_UpdateCartByID_Handler,
		},
		{
			MethodName: "DeleteCartByID",
			Handler:    _SQLService_DeleteCartByID_Handler,
		},
		{
			MethodName: "CreateCartItem",
			Handler:    _SQLService_CreateCartItem_Handler,
		},
		{
			MethodName: "GetCartItemByID",
			Handler:    _SQLService_GetCartItemByID_Handler,
		},
		{
			MethodName: "GetCartItemByCartIDAndProductID",
			Handler:    _SQLService_GetCartItemByCartIDAndProductID_Handler,
		},
		{
			MethodName: "ListCartItemByCartID",
			Handler:    _SQLService_ListCartItemByCartID_Handler,
		},
		{
			MethodName: "UpdateCartItem",
			Handler:    _SQLService_UpdateCartItem_Handler,
		},
		{
			MethodName: "DeleteCartItemByCartIDAndProductID",
			Handler:    _SQLService_DeleteCartItemByCartIDAndProductID_Handler,
		},
		{
			MethodName: "DeleteCartItemByCartID",
			Handler:    _SQLService_DeleteCartItemByCartID_Handler,
		},
		{
			MethodName: "DeleteCartItemByProductID",
			Handler:    _SQLService_DeleteCartItemByProductID_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _SQLService_CreateSeller_Handler,
		},
		{
			MethodName: "GetSellerByID",
			Handler:    _SQLService_GetSellerByID_Handler,
		},
		{
			MethodName: "GetSellerByUserName",
			Handler:    _SQLService_GetSellerByUserName_Handler,
		},
		{
			MethodName: "UpdateSellerByID",
			Handler:    _SQLService_UpdateSellerByID_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _SQLService_CreateSession_Handler,
		},
		{
			MethodName: "GetSessionByID",
			Handler:    _SQLService_GetSessionByID_Handler,
		},
		{
			MethodName: "GetSessionByUserID",
			Handler:    _SQLService_GetSessionByUserID_Handler,
		},
		{
			MethodName: "DeleteSessionByID",
			Handler:    _SQLService_DeleteSessionByID_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _SQLService_CreateTransaction_Handler,
		},
		{
			MethodName: "ListTransactionsBySellerID",
			Handler:    _SQLService_ListTransactionsBySellerID_Handler,
		},
		{
			MethodName: "ListTransactionsByBuyerID",
			Handler:    _SQLService_ListTransactionsByBuyerID_Handler,
		},
		{
			MethodName: "ListTransactionsByCartID",
			Handler:    _SQLService_ListTransactionsByCartID_Handler,
		},
		{
			MethodName: "DeleteTransactionsByCartID",
			Handler:    _SQLService_DeleteTransactionsByCartID_Handler,
		},
		{
			MethodName: "DeleteTransactionsByBuyerID",
			Handler:    _SQLService_DeleteTransactionsByBuyerID_Handler,
		},
		{
			MethodName: "DeleteTransactionsBySellerID",
			Handler:    _SQLService_DeleteTransactionsBySellerID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sql-api.proto",
}
