// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: nosql-api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NOSQLServiceClient is the client API for NOSQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NOSQLServiceClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
	// ProductModel APIs
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*GetProductByIDResponse, error)
	ListProductsByKeyWordsAndCategory(ctx context.Context, in *ListProductsByKeyWordsAndCategoryRequest, opts ...grpc.CallOption) (*ListProductsByKeyWordsAndCategoryResponse, error)
	ListProductsBySellerID(ctx context.Context, in *ListProductsBySellerIDRequest, opts ...grpc.CallOption) (*ListProductsBySellerIDResponse, error)
	UpdateProductByID(ctx context.Context, in *UpdateProductByIDRequest, opts ...grpc.CallOption) (*UpdateProductByIDResponse, error)
	DeleteProductByID(ctx context.Context, in *DeleteProductByIDRequest, opts ...grpc.CallOption) (*DeleteProductByIDResponse, error)
}

type nOSQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNOSQLServiceClient(cc grpc.ClientConnInterface) NOSQLServiceClient {
	return &nOSQLServiceClient{cc}
}

func (c *nOSQLServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) GetProductByID(ctx context.Context, in *GetProductByIDRequest, opts ...grpc.CallOption) (*GetProductByIDResponse, error) {
	out := new(GetProductByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) ListProductsByKeyWordsAndCategory(ctx context.Context, in *ListProductsByKeyWordsAndCategoryRequest, opts ...grpc.CallOption) (*ListProductsByKeyWordsAndCategoryResponse, error) {
	out := new(ListProductsByKeyWordsAndCategoryResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/ListProductsByKeyWordsAndCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) ListProductsBySellerID(ctx context.Context, in *ListProductsBySellerIDRequest, opts ...grpc.CallOption) (*ListProductsBySellerIDResponse, error) {
	out := new(ListProductsBySellerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/ListProductsBySellerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) UpdateProductByID(ctx context.Context, in *UpdateProductByIDRequest, opts ...grpc.CallOption) (*UpdateProductByIDResponse, error) {
	out := new(UpdateProductByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/UpdateProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nOSQLServiceClient) DeleteProductByID(ctx context.Context, in *DeleteProductByIDRequest, opts ...grpc.CallOption) (*DeleteProductByIDResponse, error) {
	out := new(DeleteProductByIDResponse)
	err := c.cc.Invoke(ctx, "/proto.NOSQLService/DeleteProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NOSQLServiceServer is the server API for NOSQLService service.
// All implementations must embed UnimplementedNOSQLServiceServer
// for forward compatibility
type NOSQLServiceServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
	// ProductModel APIs
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProductByID(context.Context, *GetProductByIDRequest) (*GetProductByIDResponse, error)
	ListProductsByKeyWordsAndCategory(context.Context, *ListProductsByKeyWordsAndCategoryRequest) (*ListProductsByKeyWordsAndCategoryResponse, error)
	ListProductsBySellerID(context.Context, *ListProductsBySellerIDRequest) (*ListProductsBySellerIDResponse, error)
	UpdateProductByID(context.Context, *UpdateProductByIDRequest) (*UpdateProductByIDResponse, error)
	DeleteProductByID(context.Context, *DeleteProductByIDRequest) (*DeleteProductByIDResponse, error)
	mustEmbedUnimplementedNOSQLServiceServer()
}

// UnimplementedNOSQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNOSQLServiceServer struct {
}

func (UnimplementedNOSQLServiceServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedNOSQLServiceServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedNOSQLServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedNOSQLServiceServer) GetProductByID(context.Context, *GetProductByIDRequest) (*GetProductByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedNOSQLServiceServer) ListProductsByKeyWordsAndCategory(context.Context, *ListProductsByKeyWordsAndCategoryRequest) (*ListProductsByKeyWordsAndCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsByKeyWordsAndCategory not implemented")
}
func (UnimplementedNOSQLServiceServer) ListProductsBySellerID(context.Context, *ListProductsBySellerIDRequest) (*ListProductsBySellerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsBySellerID not implemented")
}
func (UnimplementedNOSQLServiceServer) UpdateProductByID(context.Context, *UpdateProductByIDRequest) (*UpdateProductByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductByID not implemented")
}
func (UnimplementedNOSQLServiceServer) DeleteProductByID(context.Context, *DeleteProductByIDRequest) (*DeleteProductByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedNOSQLServiceServer) mustEmbedUnimplementedNOSQLServiceServer() {}

// UnsafeNOSQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NOSQLServiceServer will
// result in compilation errors.
type UnsafeNOSQLServiceServer interface {
	mustEmbedUnimplementedNOSQLServiceServer()
}

func RegisterNOSQLServiceServer(s grpc.ServiceRegistrar, srv NOSQLServiceServer) {
	s.RegisterService(&NOSQLService_ServiceDesc, srv)
}

func _NOSQLService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).GetProductByID(ctx, req.(*GetProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_ListProductsByKeyWordsAndCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsByKeyWordsAndCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).ListProductsByKeyWordsAndCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/ListProductsByKeyWordsAndCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).ListProductsByKeyWordsAndCategory(ctx, req.(*ListProductsByKeyWordsAndCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_ListProductsBySellerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsBySellerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).ListProductsBySellerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/ListProductsBySellerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).ListProductsBySellerID(ctx, req.(*ListProductsBySellerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_UpdateProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).UpdateProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/UpdateProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).UpdateProductByID(ctx, req.(*UpdateProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NOSQLService_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NOSQLServiceServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NOSQLService/DeleteProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NOSQLServiceServer).DeleteProductByID(ctx, req.(*DeleteProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NOSQLService_ServiceDesc is the grpc.ServiceDesc for NOSQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NOSQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NOSQLService",
	HandlerType: (*NOSQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _NOSQLService_Initialize_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _NOSQLService_GetLeader_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _NOSQLService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _NOSQLService_GetProductByID_Handler,
		},
		{
			MethodName: "ListProductsByKeyWordsAndCategory",
			Handler:    _NOSQLService_ListProductsByKeyWordsAndCategory_Handler,
		},
		{
			MethodName: "ListProductsBySellerID",
			Handler:    _NOSQLService_ListProductsBySellerID_Handler,
		},
		{
			MethodName: "UpdateProductByID",
			Handler:    _NOSQLService_UpdateProductByID_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _NOSQLService_DeleteProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nosql-api.proto",
}
